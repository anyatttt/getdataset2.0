import torch
import torch.nn as nn
import numpy as np
from rdkit import Chem
from rdkit.Chem import AllChem, DataStructs
import pandas as pd
from torch_geometric.nn import GCNConv, global_mean_pool

# Define the GNN model architecture
class GNN(nn.Module):
    def __init__(self, num_node_features, hidden_channels, output_size):
        super(GNN, self).__init__()
        self.conv1 = GCNConv(num_node_features, hidden_channels)
        self.conv2 = GCNConv(hidden_channels, hidden_channels)
        self.linear = nn.Linear(hidden_channels, output_size)

    def forward(self, x, edge_index, batch):
        x = self.conv1(x, edge_index)
        x = torch.relu(x)
        x = self.conv2(x, edge_index)
        x = global_mean_pool(x, batch)
        x = self.linear(x)
        return x

# Load the trained model
output_size = 9044  # This should match the output size used during training
model = GNN(num_node_features=1, hidden_channels=128, output_size=output_size)
model.load_state_dict(torch.load("gnn_model.pth", map_location=torch.device('cpu')))
model.eval()

# Load the predetermined SMILES
def load_predetermined_smiles(file_path):
    """
    Load predetermined SMILES strings from a CSV file.
    Assumes the CSV file has a column 'SMILES'.
    """
    df = pd.read_csv(file_path)
    return df['SMILES'].tolist()

predetermined_smiles = load_predetermined_smiles('unique_smiles.csv')  # Adjust the path as needed

# Function to compute the Tanimoto similarity
def tanimoto_similarity(mol1, mol2):
    fp1 = AllChem.GetMorganFingerprintAsBitVect(mol1, 2, nBits=2048)
    fp2 = AllChem.GetMorganFingerprintAsBitVect(mol2, 2, nBits=2048)
    return DataStructs.TanimotoSimilarity(fp1, fp2)

# Define a function to predict the fragment from a given drug SMILES
def predict_fragment(drug_smiles):
    mol = Chem.MolFromSmiles(drug_smiles)
    if mol is None:
        raise ValueError(f"Invalid SMILES string: {drug_smiles}")

    max_similarity = 0
    best_fragment = None

    for fragment_smiles in predetermined_smiles:
        fragment_mol = Chem.MolFromSmiles(fragment_smiles)
        similarity = tanimoto_similarity(mol, fragment_mol)
        
        if similarity > max_similarity:
            max_similarity = similarity
            best_fragment = fragment_smiles

    return best_fragment

# Example usage
if __name__ == "__main__":
    drug_smiles = input("Enter the drug SMILES: ")
    try:
        fragment_smiles = predict_fragment(drug_smiles)
        if fragment_smiles:
            print(f"Predicted Fragment SMILES: {fragment_smiles}")
        else:
            print("Failed to find a similar fragment.")
    except Exception as e:
        print(f"Error: {e}")
